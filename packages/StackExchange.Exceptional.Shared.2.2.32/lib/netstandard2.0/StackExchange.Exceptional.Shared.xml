<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StackExchange.Exceptional.Shared</name>
    </assembly>
    <members>
        <member name="T:StackExchange.Exceptional.Command">
            <summary>
            A command to log along with an error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Command.Type">
            <summary>
            The type of this command, e.g. "SQL Server Query" 
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Command.CommandString">
            <summary>
            The string that goes with this command, e.g. the SQL query itself.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Command.Data">
            <summary>
            Data attributes about the command, e.g. the SQL, Redis, or Elastic Server, the timeout...whatever may help 
            debug an error can be logged here.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Command.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:StackExchange.Exceptional.Command"/> with the given <see cref="P:StackExchange.Exceptional.Command.Type"/> and (optionally) <see cref="P:StackExchange.Exceptional.Command.CommandString"/>.
            Commands without a command string may still be useful for when other data is present.
            </summary>
            <param name="type">The type of this command, e.g. "SQL Server Query".</param>
            <param name="commandString">The string that goes with this command, e.g. the SQL query itself.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Command.AddData(System.String,System.String)">
            <summary>
            Adds data for this command, for key/value display later.
            </summary>
            <param name="key">The key for this data.</param>
            <param name="value">The value for this data.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Command.AddData(System.Boolean,System.String,System.String)">
            <summary>
            Adds data for this command, for key/value display later.
            </summary>
            <param name="addIf">Whether to add this data.</param>
            <param name="key">The key for this data.</param>
            <param name="value">The value for this data.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Command.GetHighlightLanguage">
            <summary>
            Gets the inferred language for Highlight.js, e.g. "sql" for SQL.
            </summary>
            <returns>The specific highlight.js language to use, or empty if unknown or inferred well already.</returns>
        </member>
        <member name="T:StackExchange.Exceptional.EmailSettings">
            <summary>
            Email settings configuration, for configuring Email sending from code.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.ToAddress">
            <summary>
            The address to send email messages to.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.FromAddress">
            <summary>
            The address to send email messages from.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.FromDisplayName">
            <summary>
            The display name to send email messages from.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPHost">
            <summary>
            The SMTP server to send mail through.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPPort">
            <summary>
            The port to send mail on (if SMTP server is specified via <see cref="P:StackExchange.Exceptional.EmailSettings.SMTPHost"/>).
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPUserName">
            <summary>
            The SMTP user name to use, if authentication is needed.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPPassword">
            <summary>
            The SMTP password to use, if authentication is needed.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPEnableSSL">
            <summary>
            Whether to use SSL when sending via SMTP.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.PreventDuplicates">
            <summary>
            Flags whether or not emails are sent for duplicate errors.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.EmailSettings.Equals(System.Object)">
            <summary>
            Equals override.
            </summary>
            <param name="obj"><see cref="T:StackExchange.Exceptional.EmailSettings"/> to compare to.</param>
            <returns>Whether <paramref name="obj"/> is equal.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.EmailSettings.GetHashCode">
            <summary>
            <see cref="M:StackExchange.Exceptional.EmailSettings.GetHashCode"/> override.
            </summary>
            <returns>The hashcode of this settings variant.</returns>
        </member>
        <member name="T:StackExchange.Exceptional.Error">
            <summary>
            Represents a logical application error (as opposed to the actual <see cref="P:StackExchange.Exceptional.Error.Exception"/> it may be representing).
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Id">
            <summary>
            The ID on this error, strictly for primary keying on persistent stores.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.GUID">
            <summary>
            Unique identifier for this error, generated on the server it came from.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Settings">
            <summary>
            Settings used to log this error.
            Note: THIS IS LIKELY THE GLOBAL INSTANCE, so changes here likely impact all exceptions.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Exceptional.Error"/> class.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.#ctor(System.Exception,StackExchange.Exceptional.Internal.ExceptionalSettingsBase,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Exceptional.Error"/> class from a given <see cref="P:StackExchange.Exceptional.Error.Exception"/> instance.
            </summary>
            <param name="e">The exception we intend to log.</param>
            <param name="settings">The settings this error is being logged with.</param>
            <param name="category">The category to associate with this exception.</param>
            <param name="applicationName">The application name to log as (used for overriding current settings).</param>
            <param name="rollupPerServer">Whether to log up per-server, e.g. errors are only duplicates if they have same stack on the same machine.</param>
            <param name="initialCustomData">The initial data dictionary to start with (generated by the user).</param>
        </member>
        <member name="M:StackExchange.Exceptional.Error.InitCustomData">
            <summary>
            Only allocate this dictionary if there's a need.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.AddData(System.Exception)">
            <summary>
            Adds data from the .Data on an Exception. Note: runs for every primary and inner exception
            </summary>
            <param name="exception">The current exception we're looping over.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Error.AddCommand(StackExchange.Exceptional.Command)">
            <summary>
            Adds a command to log on this error.
            </summary>
            <param name="command">The command to add.</param>
            <returns>The added command.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.AddCustomData">
            <summary>
            Populates the CustomData collection via <see cref="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.GetCustomData"/>, if set.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.LogToStore(StackExchange.Exceptional.ErrorStore)">
            <summary>
            Logs this error to a specific store.
            </summary>
            <param name="store">The store to log to, is null the default is used.</param>
            <returns>The error if logged, or null if logging was aborted.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.LogToStoreAsync(StackExchange.Exceptional.ErrorStore)">
            <summary>
            Logs this error to a specific store.
            </summary>
            <param name="store">The store to log to, if null the default is used.</param>
            <returns>The error if logged, or null if logging was aborted.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.GetHash(System.Boolean)">
            <summary>
            Gets a unique-enough hash of this error. Stored as a quick comparison mechanism to roll-up duplicate errors.
            </summary>
            <param name="includeMachine">Whether to include <see cref="P:StackExchange.Exceptional.Error.MachineName"/> in the has calculation, creating per-machine roll-ups.</param>
            <returns>A "Unique" hash for this error.</returns>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IsProtected">
            <summary>
            Whether this error is protected from deletion.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IsDuplicate">
            <summary>
            For notifier usage - whether this error is a duplicate (already seen recently).
            Recent is defined by the <see cref="P:StackExchange.Exceptional.ErrorStoreSettings.RollupPeriod"/> setting.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Exception">
            <summary>
            The <see cref="P:StackExchange.Exceptional.Error.Exception"/> instance used to create this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ApplicationName">
            <summary>
            The name of the application that threw this exception.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Category">
            <summary>
            The category of this error, usage is up to the user.
            It could be a tag, or severity, etc.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.MachineName">
            <summary>
            The hostname where the exception occurred.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Type">
            <summary>
            The type error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Source">
            <summary>
            The source of this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Message">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Detail">
            <summary>
            The detail/stack trace of this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ErrorHash">
            <summary>
            The hash that describes this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CreationDate">
            <summary>
            The time in UTC that the error originally occurred.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.LastLogDate">
            <summary>
            The time in UTC that the error last occurred.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.StatusCode">
            <summary>
            The HTTP Status code associated with the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ServerVariables">
            <summary>
            The server variables collection for the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.QueryString">
            <summary>
            The query string collection for the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Form">
            <summary>
            The form collection for the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Cookies">
            <summary>
            A collection representing the client cookies of the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RequestHeaders">
            <summary>
            A collection representing the headers sent with the request.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CustomData">
            <summary>
            A collection of custom data added at log time.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.DuplicateCount">
            <summary>
            The number of newer Errors that have been discarded because they match this Error and fall 
            within the configured <see cref="P:StackExchange.Exceptional.ErrorStoreSettings.RollupPeriod"/> <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Commands">
            <summary>
            The commands associated with this error. For example: SQL queries, Redis commands, elastic queries, etc.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.DeletionDate">
            <summary>
            Date this error was deleted (for stores that support deletion and retention, e.g. SQL)
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Host">
            <summary>
            The URL host of the request causing this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.UrlPath">
            <summary>
            The URL *path* of the request causing this error, e.g. /MyContoller/MyAction
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FullUrl">
            <summary>
            The complete URL of the request causing this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.HTTPMethod">
            <summary>
            The HTTP Method causing this error, e.g. GET or POST.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IPAddress">
            <summary>
            The IPAddress of the request causing this error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FullJson">
            <summary>
            JSON populated from database stored, deserialized after if needed.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.ToString">
            <summary>
            Returns the value of the <see cref="P:StackExchange.Exceptional.Error.Message"/> property.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.GetFullUrl">
            <summary>
            Gets the full URL associated with the request that threw this error.
            </summary>
            <remarks>
            Accounts for HTTPS from load balancers via X-Forwarded-Proto.
            </remarks>
            <returns>The full URL, if it can be determined, an empty string otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.Clone">
            <summary>
            Create a copy of the error and collections so if it's modified in memory logging is not affected.
            </summary>
            <returns>A clone of this error.</returns>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ServerVariablesSerializable">
            <summary>
            Variables strictly for JSON serialization, to maintain non-dictionary behavior.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.QueryStringSerializable">
            <summary>
            Variables strictly for JSON serialization, to maintain non-dictionary behavior.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FormSerializable">
            <summary>
            Variables strictly for JSON serialization, to maintain non-dictionary behavior.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CookiesSerializable">
            <summary>
            Variables strictly for JSON serialization, to maintain non-dictionary behavior.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RequestHeadersSerializable">
            <summary>
            Variables strictly for JSON serialization, to maintain non-dictionary behavior.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.ToJson">
            <summary>
            Gets a JSON representation for this error.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.WriteDetailedJson(System.Text.StringBuilder)">
            <summary>
            Gets a JSON representation for this error suitable for cross-domain.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to write to.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Error.FromJson(System.String)">
            <summary>
            Deserializes provided JSON into an Error object.
            </summary>
            <param name="json">JSON representing an Error.</param>
            <returns>The Error object.</returns>
        </member>
        <member name="T:StackExchange.Exceptional.Error.NameValuePair">
            <summary>
            Serialization class in place of the NameValueCollection pairs.
            </summary>
            <remarks>This exists because things like a querystring can halve multiple values, they are not a dictionary.</remarks>
        </member>
        <member name="P:StackExchange.Exceptional.Error.NameValuePair.Name">
            <summary>
            The name for this variable.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.NameValuePair.Value">
            <summary>
            The value for this variable.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.SQL">
            <summary>
            Legacy: Sets the SQL command text associated with this error.
            Strictly for deserialization of old errors.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Url">
            <summary>
            Legacy: Sets the <see cref="P:StackExchange.Exceptional.Error.UrlPath"/> from older <see cref="P:StackExchange.Exceptional.Error.Url"/> columns.
            Strictly for deserialization of old errors.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorAfterLogEventArgs">
            <summary>
            Arguments for the event handler called after an exception is logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorAfterLogEventArgs.Error">
            <summary>
            The Error object in question.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorAfterLogEventArgs.#ctor(StackExchange.Exceptional.Error)">
            <summary>
            Creates an ErrorAfterLogEventArgs object to be passed to event handlers.
            </summary>
            <param name="e">The error to create <see cref="T:StackExchange.Exceptional.ErrorAfterLogEventArgs"/> for.</param>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorBeforeLogEventArgs">
            <summary>
            Arguments for the event handler called before an exception is logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorBeforeLogEventArgs.Abort">
            <summary>
            Whether to abort the logging of this exception, if set to true the exception will not be logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorBeforeLogEventArgs.Error">
            <summary>
            The Error object in question.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorBeforeLogEventArgs.#ctor(StackExchange.Exceptional.Error)">
            <summary>
            Creates an ErrorBeforeLogEventArgs object to be passed to event handlers, setting .Abort = true prevents the error from being logged.
            </summary>
            <param name="e">The error to create <see cref="T:StackExchange.Exceptional.ErrorBeforeLogEventArgs"/> for.</param>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorStore">
            <summary>
            Represents an error log capable of storing and retrieving errors generated in an ASP.NET Web application.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.Settings">
            <summary>
            The settings for this store.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Base constructor of the error store to set common properties.
            </summary>
            <param name="settings">The <see cref="T:StackExchange.Exceptional.ErrorStoreSettings"/> for this store.</param>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.InFailureMode">
            <summary>
            Gets if this error store is in failure mode (retrying to log in an interval).
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.LastWriteFailure">
            <summary>
            The last time this error store failed to write an error.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs an error in log for the application.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogErrorAsync(StackExchange.Exceptional.Error)">
            <summary>
            Asynchronously logs an error in log for the application.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetErrorAsync(System.Guid)">
            <summary>
            Retrieves a single error based on Id.
            </summary>
            <param name="guid">The GUID of the error to retrieve.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectErrorAsync(System.Guid)">
            <summary>
            Prevents error identified by <paramref name="guid"/> from being deleted when the error log is full, if the store supports it.
            </summary>
            <param name="guid">The GUID of the error to protect.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectErrorsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects a list of errors in the log.
            </summary>
            <param name="guids">The GUIDs of the errors to protect.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteErrorAsync(System.Guid)">
            <summary>
            Deletes a specific error from the log.
            </summary>
            <param name="guid">The GUID of the error to delete.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteErrorsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a list of errors from the log, only if they are not protected.
            </summary>
            <param name="guids">The GUIDs of the errors to delete.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.HardDeleteErrorAsync(System.Guid)">
            <summary>
            Deletes a specific error from the log, any traces of it.
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/> ID of the error to hard delete.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAllErrorsAsync(System.String)">
            <summary>
            Deletes all non-protected errors from the log.
            </summary>
            <param name="applicationName">The name of the application to delete all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetAllErrorsAsync(System.String)">
            <summary>
            Retrieves all of the errors in the log.
            </summary>
            <param name="applicationName">The name of the application to get all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetErrorCountAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if <c>null</c>.
            </summary>
            <param name="since">The date to get errors since.</param>
            <param name="applicationName">The application name to get an error count for.</param>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.Name">
            <summary>
            Get the name of this error log store implementation.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.ApplicationName">
            <summary>
            Gets the name of the application to which the log is scoped.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.WriteQueue">
            <summary>
            Gets the write queue for errors, which is populated in the case of a write failure.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.LastRetryException">
            <summary>
            Gets the last exception that happened when trying to log exceptions.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProcessNotifications(StackExchange.Exceptional.Error,System.Guid)">
            <summary>
            Notify everything currently registered as a notifier.
            </summary>
            <param name="error">The error to notify things of.</param>
            <param name="originalGuid">The GUID of the original error, for determining if this is a duplicate.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Log(StackExchange.Exceptional.Error)">
            <summary>
            Logs an error in log for the application.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogAsync(StackExchange.Exceptional.Error)">
            <summary>
            Logs an error in log for the application.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectAsync(System.Guid)">
            <summary>
            Deletes all non-protected errors from the log.
            </summary>
            <param name="guid">The GUID of the error to protect.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects a list of errors in the log.
            </summary>
            <param name="guids">The GUIDs of the errors to protect.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAsync(System.Guid)">
            <summary>
            Deletes an error from the log with the specified <paramref name="guid"/>.
            </summary>
            <param name="guid">The GUID of the error to delete.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a list of non-protected errors from the log.
            </summary>
            <param name="guids">The GUIDs of the errors to delete.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAllAsync(System.String)">
            <summary>
            Deletes all non-protected errors from the log.
            </summary>
            <param name="applicationName">The name of the application to delete all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetAsync(System.Guid)">
            <summary>
            Gets a specific exception with the specified GUID.
            </summary>
            <param name="guid">The GUID of the error to retrieve.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetAllAsync(System.String)">
            <summary>
            Gets all in the store, including those in the backup queue if it's in use.
            </summary>
            <param name="applicationName">The name of the application to get all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetCountAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets the count of exceptions, optionally those since a certain date.
            </summary>
            <param name="since">The minimum date to fetch errors after.</param>
            <param name="applicationName">The application name to fetch errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.QueueError(StackExchange.Exceptional.Error)">
            <summary>
            Queues an error into the backup/retry queue.
            </summary>
            <param name="e">The error to queue for writing.</param>
            <remarks>These will be written to the store when we're able to connect again.</remarks>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.TestAsync">
            <summary>
            Tests to see if this error store is working.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.KnownStoreTypes">
            <summary>
            The known list of error stores, loaded from all known DLLs in the running directory.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorStoreSettings">
            <summary>
            A settings object got setting up an error store.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.ApplicationName">
            <summary>
            Application name to log with.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Type">
            <summary>
            The type of error store to use, File, SQL, Memory, etc.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Path">
            <summary>
            For file-based error stores.
            The path to use on for file storage.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.ConnectionString">
            <summary>
            For database-based error stores.
            The connection string to use.  If provided, ConnectionStringName is ignored.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.TableName">
            <summary>
            For database-based error stores.
            The table name (optionally including schema), e.g. "dbo.Exceptions" or "mySchema.MyExceptions" to use when storing exceptions. If null, the store default will be used.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Size">
            <summary>
            The size of this error log, either how many to keep or how many to display depending on type.
            Defaults to 200.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.RollupPeriod">
            <summary>
            The duration of error groups to roll-up, similar errors within this timespan (those with the same stack trace) will be shown as duplicates.
            Defaults to 10 minutes.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.BackupQueueSize">
            <summary>
            The size of the backup queue to use for the log, after roll-ups, it's how many entries in memory can be stored before culling the oldest.
            Defaults to 1000.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.BackupQueueRetryInterval">
            <summary>
            When a connection to the error store failed, how often to retry logging the errors in queue for logging.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStoreSettings.PropertyChanged">
            <summary>
            Fired when properties on this change, causing a need to reload the default queue.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalSettingsExtensions">
            <summary>
            Extension methods for <see cref="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalSettingsExtensions.Bind``1(Microsoft.Extensions.Configuration.IConfiguration,``0)">
            <summary>
            Binds an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> to an <typeparamref name="T"/> object.
            This happens with a normal .Bind() followed by the complex type mappings manually.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase"/> to bind to.</typeparam>
            <param name="config">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/> to bind.</param>
            <param name="settings">The <typeparamref name="T"/> to bind to.</param>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalUtils">
            <summary>
            Utilities for Exceptions!
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalUtils.StackTrace">
            <summary>
            StackTrace utilities
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalUtils.StackTrace.HtmlPrettify(System.String,StackExchange.Exceptional.StackTraceSettings)">
            <summary>
            Converts a stack trace to formatted HTML with styling and linkifiation.
            </summary>
            <param name="stackTrace">The stack trace to HTMLify.</param>
            <param name="settings">The <see cref="T:StackExchange.Exceptional.StackTraceSettings"/> to use in this render.</param>
            <returns>An HTML-pretty version of the stack trace.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalUtils.StackTrace.NormalizeMethodName(System.String)">
            <summary>
            .NET Core changes methods so generics render as as Method[T], this normalizes it.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalUtils.Test">
            <summary>
            General test methods for exceptions.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalUtils.Test.GetRedisException">
            <summary>
            Gets an example RedisException
            </summary>
            <returns></returns>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalUtils.Test.RedisException">
            <summary>
            A mock RedisException, like StackExchange.Redis contains
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalUtils.Test.RedisException.#ctor(System.String)">
            <summary>
            Creates a redis exception with a message.
            </summary>
            <param name="message">The message to use for this exception.</param>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalUtils.Test.RedisException.ExceptionalHandler(StackExchange.Exceptional.Error)">
            <summary>
            An example of a handler that adds data to the exception when logged.
            This will be called whenever the exception is logged, adding a command and keys
            to the exception.
            </summary>
            <param name="e">The <see cref="T:StackExchange.Exceptional.Error"/> wrapper of the exception to handle.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Extensions">
            <summary>
            Extensions methods for <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.LogNoContext(System.Exception,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            For logging an exception with no HttpContext, most commonly used in non-web applications 
            so that they don't have to carry a reference to System.Web.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="category">The category to associate with this exception.</param>
            <param name="rollupPerServer">Whether to log up per-server, e.g. errors are only duplicates if they have same stack on the same machine.</param>
            <param name="customData">Any custom data to store with the exception like UserId, etc...this will be rendered as JSON in the error view for script use.</param>
            <param name="applicationName">If specified, the application name to log with, if not specified the name in <see cref="P:StackExchange.Exceptional.ErrorStoreSettings.ApplicationName"/> is used.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.LogNoContextAsync(System.Exception,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            For logging an exception with no HttpContext asynchronously, most commonly used in non-web applications 
            so that they don't have to carry a reference to System.Web.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="category">The category to associate with this exception.</param>
            <param name="rollupPerServer">Whether to log up per-server, e.g. errors are only duplicates if they have same stack on the same machine.</param>
            <param name="customData">Any custom data to store with the exception like UserId, etc...this will be rendered as JSON in the error view for script use.</param>
            <param name="applicationName">If specified, the application name to log with, if not specified the name in <see cref="P:StackExchange.Exceptional.ErrorStoreSettings.ApplicationName"/> is used.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.AddLogData``1(``0,System.String,System.String)">
            <summary>
            Adds a key/value pair for logging to an exception, one that'll appear in exceptional
            </summary>
            <typeparam name="T">The specific type of exception (for return type chaining).</typeparam>
            <param name="ex">The exception itself.</param>
            <param name="key">The key to add to the exception data.</param>
            <param name="value">The value to add to the exception data.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.AddLogData``1(``0,System.String,System.Object)">
            <summary>
            Adds a key/value pair for logging to an exception, one that'll appear in exceptional
            </summary>
            <typeparam name="T">The specific type of exception (for return type chaining).</typeparam>
            <param name="ex">The exception itself.</param>
            <param name="key">The key to add to the exception data.</param>
            <param name="value">The value to add to the exception data.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.AddDefault(System.Collections.Generic.Dictionary{System.String,System.Action{StackExchange.Exceptional.Error}})">
            <summary>
            Adds the default data handlers to a handlers collection.
            </summary>
            <param name="handlers">The dictionary to register these default handlers on.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.AddHandler``1(System.Collections.Generic.Dictionary{System.String,System.Action{StackExchange.Exceptional.Error}},System.Action{StackExchange.Exceptional.Error,``0})">
            <summary>
            Convenience method for adding a handler for an exception type.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:System.Exception"/> to handle.</typeparam>
            <param name="handlers">The handlers collection to add to (usually Settings.Current.DataHandlers)</param>
            <param name="handler">The handler action to use.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.AddHandler(System.Collections.Generic.Dictionary{System.String,System.Action{StackExchange.Exceptional.Error}},System.String,System.Action{StackExchange.Exceptional.Error,System.Exception})">
            <summary>
            Convenience method for adding a handler for an exception type. Note that the handler here doesn't have the exception
            (due to not having a reference to every exception on earth), so behavior is limited to Exception for things like .Data, etc.
            </summary>
            <param name="handlers">The handlers collection to add to (usually Settings.Current.DataHandlers)</param>
            <param name="typeName">The full name of the type, e.g. "System.Data.SqlClient.SqlException"</param>
            <param name="handler">The handler action to use.</param>
        </member>
        <member name="T:StackExchange.Exceptional.IExceptionalHandled">
            <summary>
            Interface an Exception type can implement that handles adding log data to exceptional.
            This allows all the relevant data to be logged in the Exception's class rather that in
            the logging config elsewhere.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.IExceptionalHandled.ExceptionalHandler(StackExchange.Exceptional.Error)">
            <summary>
            The handler or "what to do" when Exceptional logs an exception of this type
            Access <paramref name="e"/>.Exception to get the instance of the exception thrown here.
            </summary>
            <param name="e">The error wrapper of the exception to handle.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.CaseInsensitiveDictionaryConverter`1">
            <summary>
            Adapted from http://antonkallenberg.com/2015/03/13/json-net-case-insensitive-dictionary/
            Used for case insensitive dictionaries from configs, like HTTP header filters.
            </summary>
            <typeparam name="T">The type in the string-keyed dictionary.</typeparam>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.Constants">
            <summary>
            Storage for constants used for libraries and views.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.Constants.CustomDataErrorKey">
            <summary>
            Key for storing errors that happen when fetching custom data.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.Constants.CollectionErrorKey">
            <summary>
            Key for storing errors that happen when fetching data from a collection in the request, e.g. ServerVariables, Cookies, etc.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.Constants.CustomDataKeyPrefix">
            <summary>
            Key for prefixing fields in .Data for logging to CustomData
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase">
            <summary>
            Settings for Exceptional error logging.
            </summary>
        </member>
        <member name="E:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.OnBeforeLog">
            <summary>
            Event handler to run before an exception is logged to the store.
            </summary>
        </member>
        <member name="E:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.OnAfterLog">
            <summary>
            Event handler to run after an exception has been logged to the store.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.OnLogFailure">
            <summary>
            Action to run when we failed to log an exception to the underlying store.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Notifiers">
            <summary>
            Notifiers to run just after an error is logged, like emailing it to a user.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Register(StackExchange.Exceptional.Notifiers.IErrorNotifier)">
            <summary>
            Registers a notifier if it's not already registered.
            </summary>
            <param name="notifier">The <see cref="T:StackExchange.Exceptional.Notifiers.IErrorNotifier"/> to register.</param>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.ExceptionActions">
            <summary>
            Data handlers, for adding any data desirable to an exception before logging, like Commands.
            The key here is the full type name, e.g. "System.Data.SqlClient.SqlException"
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.DataIncludeRegex">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> of data keys to include. For example, "Redis.*" would include all keys that start with Redis.
            For options, <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> and <see cref="F:System.Text.RegularExpressions.RegexOptions.Singleline"/> are recommended.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.AppendFullStackTraces">
            <summary>
            Whether to append full stack traces to exceptions. Defaults to true.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.GetCustomData">
            <summary>
            Method to get custom data for an error; will be called when custom data isn't already present.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Render">
            <summary>
            Settings for the rendering of pages.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.RenderSettings">
            <summary>
            Settings for the rendering of pages.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.RenderSettings.JSIncludes">
            <summary>
            A list of a JavaScript files to include to all error log pages, for customizing the behavior and such.
            Be sure to resolve the path before passing it in here, as it will be rendered literally in the &lt;script src="" attribute.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.RenderSettings.CSSIncludes">
            <summary>
            Adds a CSS include to all error log pages, for customizing the look and feel.
            Be sure to resolve the path before passing it in here, as it will be rendered literally in the &lt;link href="" attribute.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.DefaultStore">
            <summary>
            Gets the default error store specified in the configuration, 
            or the in-memory store if none is configured.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.DefaultStoreIfExists">
            <summary>
            Internal fetcher for getting the <see cref="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.DefaultStore"/>, if it's been initialized.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Store">
            <summary>
            The ErrorStore section of the configuration, optional and will default to a MemoryErrorStore if not specified.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Ignore">
            <summary>
            Ignore settings, for filtering out exceptions which aren't wanted.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.IgnoreSettings">
            <summary>
            Ignore settings, for filtering out exceptions which aren't wanted.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.IgnoreSettings.Regexes">
            <summary>
            Regular expressions collection for errors to ignore.  
            Any errors with a .ToString() matching any <see cref="T:System.Text.RegularExpressions.Regex"/> here will not be logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.IgnoreSettings.Types">
            <summary>
            Types collection for errors to ignore.  
            Any errors with a Type matching any name here will not be logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilters">
            <summary>
            Log filters, for filtering out form and cookie values to prevent logging sensitive data.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilterSettings">
            <summary>
            Log filters, for filtering out form and cookie values to prevent logging sensitive data
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilterSettings.Form">
            <summary>
            Form submitted values to replace on save - this prevents logging passwords, etc.
            The key is the form value to match, the value is what to replace it with when logging.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilterSettings.Cookie">
            <summary>
            Cookie values to replace on save - this prevents logging authentication tokens, etc.
            The key is the cookie name to match, the value is what to use when logging.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilterSettings.Header">
            <summary>
            Header values to replace on save - this prevents logging authentication tokens, etc.
            The key is the header name to match, the value is what to use when logging.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.LogFilterSettings.QueryString">
            <summary>
            Query string values to replace on save - this prevents logging authentication tokens, etc.
            The key is the query string parameter name to match, the value is what to use when logging.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.Email">
            <summary>
            Settings for controlling email sending
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.StackTrace">
            <summary>
            Settings for prettifying a StackTrace
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.ExceptionalSettingsBase.#ctor">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase"/>.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.HtmlBase">
            <summary>
            Represents a class that outputs some HTML.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.HtmlBase.HiddenHttpKeys">
            <summary>
            Known ServerVariable keys to hide when rendering
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.HtmlBase.DefaultHttpKeys">
            <summary>
            Known ServerVariable keys
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.HtmlBase.RenderHtml(System.Text.StringBuilder)">
            <summary>
            Renders the HTML for this item to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The string builder to render to.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.HtmlBase.Render">
            <summary>
            Renders to the HTML for this item.
            </summary>
            <returns>The HTML output.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.HtmlBase.SanitizeUrl(System.String)">
            <summary>
            Sanitizes a URL for safety.
            </summary>
            <param name="url">The URL string to sanitize.</param>
            <returns>The sanitized URL.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.HtmlBase.Linkify(System.String,System.String)">
            <summary>
            Linkifies a URL, returning an anchor-wrapped version if sane.
            </summary>
            <param name="s">The URL string to attempt to linkify.</param>
            <param name="color">The HTML color to use (hex code or name).</param>
            <returns>The linified string, or the encoded string if not a safe URL.</returns>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.InternalExtensions">
            <summary>
            Internal Exceptional extensions, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ShouldBeIgnored(System.Exception,StackExchange.Exceptional.Internal.ExceptionalSettingsBase)">
            <summary>
            Returns if an exception should be ignored according to the passed-in <see cref="T:StackExchange.Exceptional.Internal.ExceptionalSettingsBase"/>.
            </summary>
            <param name="ex">The exception to check.</param>
            <param name="settings">The settings to check <paramref name="ex"/> against.</param>
            <returns>Whether this exception should be ignored.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.GetErrorIfNotIgnored(System.Exception,StackExchange.Exceptional.Internal.ExceptionalSettingsBase,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets an <see cref="T:StackExchange.Exceptional.Error"/> if current settings don't tell us to ignore it.
            </summary>
            <param name="ex">The exception to consider.</param>
            <param name="category">The category of the exception.</param>
            <param name="applicationName">The application name to log under.</param>
            <param name="rollupPerServer">Whether to rollup by server.</param>
            <param name="customData">The custom data, if any, to pass in.</param>
            <param name="settings">The specific settings to use.</param>
            <returns>An error if not ignored, <c>null</c> if ignored.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.IsBCLException(System.Exception)">
            <summary>
            Returns if the type of the exception is built into the .NET framework.
            </summary>
            <param name="e">The exception to check.</param>
            <returns>True if the exception is a type from within the CLR, false if it's a user/third party type.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.IsDescendentOf(System.Type,System.String)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> is <paramref name="ancestorName"/>, or descendant from <paramref name="ancestorName"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="ancestorName">The <see cref="T:System.Type"/> name to check for ancestry of.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ToRelativeTime(System.DateTime)">
            <summary>
            Returns a humanized string indicating how long ago something happened, e.g. "3 days ago".
            For future dates, returns when this DateTime will occur from <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to represents as a relative time string.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Force string to be <paramref name="maxLength"/> or smaller.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to truncate.</param>
            <param name="maxLength">The length to truncate the string to.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.EncodeTruncateWithEllipsis(System.String,System.Int32)">
            <summary>
            If this <see cref="T:System.String"/> is over <paramref name="maxLength"/>, answers a new <see cref="T:System.String"/> 
            with Length = <paramref name="maxLength"/> and ... as the final three characters.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to truncate.</param>
            <param name="maxLength">The length to truncate the string to.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.AppendHtmlEncode(System.Text.StringBuilder,System.String)">
            <summary>
            Appends a <see cref="T:System.String"/>, HTML encoding the contents first.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
            <param name="s">The <see cref="T:System.String"/> to encode and append.</param>
            <returns>The original <see cref="T:System.Text.StringBuilder"/> for chaining.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.HtmlEncode(System.String)">
            <summary>
            Encodes the string as HTML.
            </summary>
            <param name="s">The dangerous string to encode.</param>
            <returns>The safely encoded HTML string.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML string.
            </summary>
            <param name="s">The HTML-encoded string to decode.</param>
            <returns>The decoded HTML string.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.UrlEncode(System.String)">
            <summary>
            Encodes the string for URLs.
            </summary>
            <param name="s">The dangerous string to URL encode.</param>
            <returns>The safely encoded URL string.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.UrlDecode(System.String)">
            <summary>
            Decodes a URL-encoded string.
            </summary>
            <param name="s">The URL-encoded string to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
            <param name="s">The string to check.</param>
            <remarks>I'm so tired of typing String.IsNullOrEmpty(s)</remarks>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
            <param name="s">The string to check.</param>
            <remarks>I'm also tired of typing !String.IsNullOrEmpty(s)</remarks>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.InternalExtensions.UnknownIP">
            <summary>
            When a client IP can't be determined
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.GetRemoteIP(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Retrieves the IP address of the current request -- handles proxies and private networks.
            </summary>
            <param name="serverVariables">The server variables collection to extract the IP from.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ToGuid(System.String)">
            <summary>
            Converts a string to a GUID, or <see cref="F:System.Guid.Empty"/> if empty or invalid.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to attempt conversion to a <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ToShortTypeName(System.String)">
            <summary>
            Gets the short exception name, e.g. "System.IndexOutOfRange" returns just "IndexOutOfRange".
            </summary>
            <param name="type">The type to get a short name for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ResolvePath(System.String)">
            <summary>
            Resolves ~\ relative paths if needed.
            </summary>
            <param name="path">The path to resolve.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ToEpochTime(System.DateTime)">
            <summary>
            Returns a Unix Epoch time given a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to convert.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.ToEpochTime(System.Nullable{System.DateTime})">
            <summary>
            Returns a Unix Epoch time if given a value, and null otherwise.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to convert.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.InternalExtensions.QueryStringReplace(System.String,System.String,System.String)">
            <summary>
            Replaces a QueryString token with the replacement value.
            </summary>
            <param name="queryString">The querystring to operate on.</param>
            <param name="key">The key to look for.</param>
            <param name="value">The value to replace.</param>
            <returns>The updated query string.</returns>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.IPNet.ReservedPrivateRanges">
            <summary>
            Private IP Ranges reserved for internal use by ARIN
            These are not routable on the global Internet
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.IPNet.TinyIPAddress.NumberOfSetBitsImpl(System.UInt32)">
            <summary>
             Gets the number of bits set in a <see cref="T:System.UInt32"/>, taken from 
             https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer
             </summary>
             <param name="i">The value to check.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.IPNet.TinyIPAddress.NumberOfSetBitsImpl(System.UInt64)">
            <summary>
             Gets the number of bits set in a <see cref="T:System.UInt64"/>, taken from 
             https://stackoverflow.com/questions/2709430/count-number-of-bits-in-a-64-bit-long-big-integer
             </summary>
             <param name="i">The value to check.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.KnownRoutes">
            <summary>
            Internal Exceptional collection, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Delete">
            <summary>/delete</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.DeleteAll">
            <summary>/delete-all</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.DeleteList">
            <summary>/delete-list</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Protect">
            <summary>/protect</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.ProtectList">
            <summary>/protect-list</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Info">
            <summary>/info</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Json">
            <summary>/json</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Css">
            <summary>/css</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Js">
            <summary>/js</summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.KnownRoutes.Test">
            <summary>/test</summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.Resources">
            <summary>
            Internal Exceptional resources, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.Resources.BundleJs">
            <summary>
            The JavaScript bundle.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Internal.Resources.BundleCss">
            <summary>
            The CSS bundle.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.Resources.ResourceCache">
            <summary>
            Cache data for a specific resource.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.Resources.ResourceCache.Sha512">
            <summary>
            The SHA 384 hash for this resource.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.Resources.ResourceCache.Content">
            <summary>
            The full content string for this resource.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.Resources.ResourceCache.MimeType">
            <summary>
            The MIME type for this resource.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.Statics">
            <summary>
            Internal Exceptional static controls, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.Statics.Settings">
            <summary>
            Settings for context-less logging.
            </summary>
            <remarks>
            In ASP.NET (non-Core) this is populated by the ConfigSettings load.
            In ASP.NET Core this is populated by .Configure() in the DI pipeline.
            </remarks>
        </member>
        <member name="P:StackExchange.Exceptional.Internal.Statics.IsLoggingEnabled">
            <summary>
            Returns whether an error passed in right now would be logged.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Internal.StringBuilderCache">
            <summary>
            Provides optimized access to StringBuilder instances.
            Credit: Marc Gravell (@marcgravell), Stack Exchange Inc.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.StringBuilderCache.Get(System.Int32)">
            <summary>
            Obtain a StringBuilder instance; this could be a recycled instance, or could be new.
            </summary>
            <param name="capacity">The capacity to start the fetched <see cref="T:System.Text.StringBuilder"/> at.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.StringBuilderCache.ToStringRecycle(System.Text.StringBuilder)">
            <summary>
            Get the string contents of a StringBuilder and recycle the instance at the same time.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.StringBuilderCache.ToStringRecycle(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Get the string contents of a StringBuilder and recycle the instance at the same time.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
            <param name="startIndex">The index to start at.</param>
            <param name="length">The amount of characters to get.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Internal.StringBuilderCache.Recycle(System.Text.StringBuilder)">
            <summary>
            Recycles a StringBuilder instance if possible.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Notifiers.EmailNotifier">
            <summary>
            A notifier that emails when an error occurs.
            If an error is a duplicate, (the second of the same error in a short period), it will not be sent if
            <see cref="P:StackExchange.Exceptional.EmailSettings.PreventDuplicates"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Notifiers.EmailNotifier.Settings">
            <summary>
            Settings for this email notifier. Changes will take effect in real time.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Notifiers.EmailNotifier.Enabled">
            <summary>
            Whether email functionality is enabled.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Notifiers.EmailNotifier.#ctor(StackExchange.Exceptional.EmailSettings)">
            <summary>
            Configures a new email notifier. Note that if configuration isn't valid this will silently fail.
            </summary>
            <param name="settings">Settings to use to configure error emailing.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Notifiers.EmailNotifier.Notify(StackExchange.Exceptional.Error)">
            <summary>
            If enabled, sends an error email to the configured recipients.
            </summary>
            <param name="error">The error the email is about.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Notifiers.EmailNotifier.Equals(System.Object)">
            <summary>
            Equals override, actually using <see cref="M:StackExchange.Exceptional.Notifiers.EmailNotifier.GetHashCode"/> underneath.
            </summary>
            <param name="obj"><see cref="T:StackExchange.Exceptional.Notifiers.EmailNotifier"/> to compare to.</param>
            <returns>Whether <paramref name="obj"/> is equal.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Notifiers.EmailNotifier.GetHashCode">
            <summary>
            <see cref="M:StackExchange.Exceptional.Notifiers.EmailNotifier.GetHashCode"/> override, actually comparing <see cref="P:StackExchange.Exceptional.Notifiers.EmailNotifier.Settings"/>.
            </summary>
            <returns>The hashcode of this notifier/settings variant.</returns>
        </member>
        <member name="T:StackExchange.Exceptional.Notifiers.IErrorNotifier">
            <summary>
            Represents a notifier, something that takes an exception that was just logged and notifies someone or something else.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Notifiers.IErrorNotifier.Enabled">
            <summary>
            Whether this notifier is enabled.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Notifiers.IErrorNotifier.Notify(StackExchange.Exceptional.Error)">
            <summary>
            Processes an error that was just logged.
            </summary>
            <param name="error">The error to notify someone or something about.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Pages.ErrorDetailPage">
            <summary>
            An error detail page for showing the specifics on a single error.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.ErrorDetailPage.ShowActionLinks">
            <summary>
            Whether to show the action links for this exception.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.ErrorDetailPage.#ctor(StackExchange.Exceptional.Error,StackExchange.Exceptional.Internal.ExceptionalSettingsBase,StackExchange.Exceptional.ErrorStore,System.String,System.Guid)">
            <summary>
            Creates an <see cref="T:StackExchange.Exceptional.Pages.ErrorDetailPage"/>.
            </summary>
            <param name="error">The error we're rendering details.</param>
            <param name="settings">Current Exceptional settings.</param>
            <param name="store">The store this error is from.</param>
            <param name="baseURL">The base URL for the current request.</param>
            <param name="guid">The id for the error (populate even if the error is null).</param>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.ErrorDetailPage.RenderInnerHtml(System.Text.StringBuilder)">
            <summary>
            Renders the main contents of the page.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to render to.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Pages.ErrorListPage">
            <summary>
            An error listing page for showing the last n errors in the store.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.ErrorListPage.#ctor(StackExchange.Exceptional.ErrorStore,StackExchange.Exceptional.Internal.ExceptionalSettingsBase,System.String,System.Collections.Generic.List{StackExchange.Exceptional.Error})">
            <summary>
            Creates an error listing page for rendering.
            </summary>
            <param name="store">The error store to use.</param>
            <param name="settings">Current Exceptional settings.</param>
            <param name="baseURL">The base URL for all links and items in the page.</param>
            <param name="errors">The list of errors to display on this page.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.ErrorListPage.RenderInnerHtml(System.Text.StringBuilder)">
            <summary>
            Renders the contents of the middle of the master page.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to render to.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Pages.WebPage">
            <summary>
            Represents a base page with the chrome for rendering HTML content.
            Override this page and implement <see cref="M:StackExchange.Exceptional.Pages.WebPage.RenderInnerHtml(System.Text.StringBuilder)"/> for rendering.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.Error">
            <summary>
            The current Error, if any.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.PageTitle">
            <summary>
            The &gt;title&lt; of the page.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.HeaderTitle">
            <summary>
            The header title, visible in the page itself.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.Store">
            <summary>
            The store we're rendering with this page.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.BaseUrl">
            <summary>
            The base URL for requests to this page.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.Settings">
            <summary>
            The current settings.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.InlineCSS">
            <summary>
            Whether to inline CSS styles in the page.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Pages.WebPage.IncludeJS">
            <summary>
            Whether to include the JS as a linked resource.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.WebPage.#ctor(StackExchange.Exceptional.Error,StackExchange.Exceptional.Internal.ExceptionalSettingsBase,StackExchange.Exceptional.ErrorStore,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:StackExchange.Exceptional.Pages.WebPage"/> for rendering.
            </summary>
            <param name="error">The current error (null if not on an error-specific page).</param>
            <param name="settings">Current Exceptional settings.</param>
            <param name="store">The store to render.</param>
            <param name="baseURL">The base URL for the current request.</param>
            <param name="pageTitle">The title of the page.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.WebPage.Url(System.String)">
            <summary>
            Gets the full URL for a given path.
            </summary>
            <param name="path">The path to get a full URL for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.WebPage.RenderInnerHtml(System.Text.StringBuilder)">
            <summary>
            The method to override for rendering the main contents of the page.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to render to.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Pages.WebPage.RenderHtml(System.Text.StringBuilder)">
            <summary>
            Renders the page to the provided <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to render to.</param>
        </member>
        <member name="F:StackExchange.Exceptional.Pages.WebPage.IconX">
            <summary>
            SVG Icon: X
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Pages.WebPage.IconLock">
            <summary>
            SVG Icon: Lock
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.StackTraceSettings">
            <summary>
            Settings for prettifying a StackTrace
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.StackTraceSettings.EnablePrettyGenerics">
            <summary>
            Replaces generic names like Dictionary`2 with Dictionary&lt;TKey,TValue&gt;.
            Specific formatting is based on the <see cref="P:StackExchange.Exceptional.StackTraceSettings.Language"/> setting.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.StackTraceSettings.Language">
            <summary>
            The language to use when prettifying StackTrace generics.
            Defaults to C#.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.StackTraceSettings.IncludeGenericTypeNames">
            <summary>
            Whether to print generic type names like &lt;T1, T2&gt; etc. or just use commas, e.g. &lt;,,&gt; if <see cref="P:StackExchange.Exceptional.StackTraceSettings.Language"/> is C#.
            Defaults to true.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.StackTraceSettings.LinkReplacements">
            <summary>
            Link replacements to run on the stack trace, e.g. for linkifying SourceLink to GitHub, etc.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.StackTraceSettings.CodeLanguage">
            <summary>
            The language to use when operating on errors and stack traces.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.StackTraceSettings.CodeLanguage.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.StackTraceSettings.CodeLanguage.FSharp">
            <summary>
            F#
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.StackTraceSettings.CodeLanguage.VB">
            <summary>
            Visual Basic
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.StackTraceSettings.AddReplacement(System.String,System.String)">
            <summary>
            Adds a <see cref="T:System.Text.RegularExpressions.Regex"/>-based replacement to <see cref="P:StackExchange.Exceptional.StackTraceSettings.LinkReplacements"/>.
            </summary>
            <param name="matchPattern">The pattern for the <see cref="T:System.Text.RegularExpressions.Regex"/>.</param>
            <param name="repalcementPattern">The replacement pattern.</param>
        </member>
        <member name="M:StackExchange.Exceptional.StackTraceSettings.#ctor">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.StackTraceSettings"/> with default replacements.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.JSONErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses JSON files as its backing store. 
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.JSONErrorStore.Name">
            <summary>
            Name for this error store.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.JSONErrorStore.MaximumSize">
            <summary>
            The maximum count of errors stored before the first is overwritten.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.JSONErrorStore.DefaultSize">
            <summary>
            The default maximum count of errors stored before the first is overwritten.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.JSONErrorStore"/> with the specified path string.
            </summary>
            <param name="path">The folder path to use to store errors.</param>
            <param name="size">How many errors to limit the log to, the size+1th error (oldest) will be removed if exceeded.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.JSONErrorStore"/> with the given configuration.
            </summary>
            <param name="settings">The <see cref="T:StackExchange.Exceptional.ErrorStoreSettings"/> for this store.</param>    
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.ProtectErrorAsync(System.Guid)">
            <summary>
            Protects an error from deletion, by making it read-only.
            </summary>
            <param name="guid">The GUID of the error to protect</param>
            <returns><c>true</c> if the error was found and protected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.DeleteErrorAsync(System.Guid)">
            <summary>
            Deletes an error, by deleting it from the logging folder.
            </summary>
            <param name="guid">The GUID of the error to delete.</param>
            <returns><c>true</c> if the error was found and deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.DeleteAllErrorsAsync(System.String)">
            <summary>
            Deleted all errors in the log, by clearing all *.json files in the folder.
            </summary>
            <param name="applicationName">The name of the application to delete all errors for.</param>
            <returns><c>true</c> if any errors were deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the JSON representation of an Error to the file store specified by the page for this store.
            If the roll-up conditions are met, then the matching error will have a 
            DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new file for the error.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetErrorAsync(System.Guid)">
            <summary>
            Gets the error with the specified GUID from the log/folder.
            </summary>
            <param name="guid">The GUID of the error to retrieve.</param>
            <returns>The error object if found, null otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetAllErrorsAsync(System.String)">
            <summary>
            Retrieves all of the errors in the log folder.
            </summary>
            <param name="applicationName">The name of the application to get all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetErrorCountAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if null.
            </summary>
            <param name="since">The date to get errors since.</param>
            <param name="applicationName">The application name to get an error count for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.TryFindOriginalError(System.String,StackExchange.Exceptional.Error@)">
            <summary>
            Answers the older exception that 'possibleDuplicate' matches, returning null if no match is found.
            </summary>
            <param name="messageHash">The hash of the error message (located in the filename).</param>
            <param name="original">The original error, if found. <c>null</c> if no matches are found.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.MemoryErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses memory as its backing store. 
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.MemoryErrorStore.MaximumSize">
            <summary>
            The maximum count of errors stored before the first is overwritten.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.MemoryErrorStore.DefaultSize">
            <summary>
            The default maximum count of errors stored before the first is overwritten.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with defaults.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with the given size.
            </summary>
            <param name="settings">The <see cref="T:StackExchange.Exceptional.ErrorStoreSettings"/> for this store.</param>  
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with the given size.
            </summary>
            <param name="size">How many errors to limit the log to, the size+1th error (oldest) will be removed if exceeded.</param>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.MemoryErrorStore.Name">
            <summary>
            Name for this error store
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.ProtectErrorAsync(System.Guid)">
            <summary>
            Protects an error from deletion, by setting IsProtected = <c>true</c>.
            </summary>
            <param name="guid">The GUID of the error to protect.</param>
            <returns><c>true</c> if the error was found and protected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.DeleteErrorAsync(System.Guid)">
            <summary>
            Deletes an error, by deleting it from the in-memory log.
            </summary>
            <param name="guid">The GUID of the error to delete.</param>
            <returns><c>true</c> if the error was found and deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.DeleteAllErrorsAsync(System.String)">
            <summary>
            Deleted all errors in the log, by clearing the in-memory log.
            </summary>
            <param name="applicationName">The name of the application to delete all errors for.</param>
            <returns><c>true</c> in all cases.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the error to the in-memory error log.
            If the roll-up conditions are met, then the matching error will have a 
            DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new entry for the error.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetErrorAsync(System.Guid)">
            <summary>
            Gets the error with the specified GUID from the in-memory log.
            </summary>
            <param name="guid">The GIUID of the error to retrieve.</param>
            <returns>The error object if found, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetAllErrorsAsync(System.String)">
            <summary>
            Retrieves all of the errors in the log.
            </summary>
            <param name="applicationName">The name of the application to get all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetErrorCountAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if <c>null</c>.
            </summary>
            <param name="since">The date to get errors since.</param>
            <param name="applicationName">The application name to get an error count for.</param>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.SQLErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses SQL Server as its backing store. 
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.SQLErrorStore.Name">
            <summary>
            Name for this error store.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.SQLErrorStore.MaximumDisplayCount">
            <summary>
            The maximum count of errors to show.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.SQLErrorStore"/> with the specified connection string.
            The default table name is "Exceptions".
            </summary>
            <param name="connectionString">The database connection string to use.</param>
            <param name="applicationName">The application name to use when logging.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.SQLErrorStore"/> with the given configuration.
            The default table name is "Exceptions".
            </summary>
            <param name="settings">The <see cref="T:StackExchange.Exceptional.ErrorStoreSettings"/> for this store.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.ProtectErrorAsync(System.Guid)">
            <summary>
            Protects an error from deletion, by making IsProtected = 1 in the database.
            </summary>
            <param name="guid">The GUID of the error to protect.</param>
            <returns><c>true</c> if the error was found and protected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.ProtectErrorsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects errors from deletion, by making IsProtected = 1 in the database.
            </summary>
            <param name="guids">The GUIDs of the errors to protect.</param>
            <returns><c>true</c> if the errors were found and protected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteErrorAsync(System.Guid)">
            <summary>
            Deletes an error, by setting DeletionDate = GETUTCDATE() in SQL.
            </summary>
            <param name="guid">The GUID of the error to delete.</param>
            <returns><c>true</c> if the error was found and deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteErrorsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes errors, by setting DeletionDate = GETUTCDATE() in SQL.
            </summary>
            <param name="guids">The GUIDs of the errors to delete.</param>
            <returns><c>true</c> if the errors were found and deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.HardDeleteErrorAsync(System.Guid)">
            <summary>
            Hard deletes an error, actually deletes the row from SQL rather than setting <see cref="P:StackExchange.Exceptional.Error.DeletionDate"/>.
            This is used to cleanup when testing the error store when attempting to come out of retry/failover mode after losing connection to SQL.
            </summary>
            <param name="guid">The GUID of the error to hard delete.</param>
            <returns><c>true</c> if the error was found and deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteAllErrorsAsync(System.String)">
            <summary>
            Deleted all errors in the log, by setting <see cref="P:StackExchange.Exceptional.Error.DeletionDate"/> = GETUTCDATE() in SQL.
            </summary>
            <param name="applicationName">The name of the application to delete all errors for.</param>
            <returns><c>true</c> if any errors were deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the error to SQL.
            If the roll-up conditions are met, then the matching error will have a 
            DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new row for the error.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.LogErrorAsync(StackExchange.Exceptional.Error)">
            <summary>
            Asynchronously logs the error to SQL.
            If the roll-up conditions are met, then the matching error will have a 
            DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new row for the error.
            </summary>
            <param name="error">The error to log.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetErrorAsync(System.Guid)">
            <summary>
            Gets the error with the specified GUID from SQL.
            This can return a deleted error as well, there's no filter based on DeletionDate.
            </summary>
            <param name="guid">The GUID of the error to retrieve.</param>
            <returns>The error object if found, null otherwise.</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetAllErrorsAsync(System.String)">
            <summary>
            Retrieves all non-deleted application errors in the database.
            </summary>
            <param name="applicationName">The name of the application to get all errors for.</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetErrorCountAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if <c>null</c>.
            </summary>
            <param name="since">The date to get errors since.</param>
            <param name="applicationName">The application name to get an error count for.</param>
        </member>
    </members>
</doc>
